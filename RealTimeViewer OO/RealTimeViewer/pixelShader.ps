Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer : register(b0)
{
    float4 diffuseColor;
    float3 lightDirection;
	float padding;
};

cbuffer Materialbuffer : register(b1)
{
	float4 materialColor;
	float4 materialSpecular;
	float materialReflect;
	float materialSpecRolloff;
	float padding2;
	float padding3;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 pixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;

	float3 lightDir;
	float lightIntensity;
	float4 color;

	textureColor = float4(0.2f, 0.2f, 0.2f, 1.0f);
	
	textureColor = shaderTexture.Sample(SampleType, input.tex);

    lightDir = lightDirection;

    //lightIntensity = saturate(dot(input.normal, lightDir));
	lightIntensity = 0.5;

    //color = saturate(diffuseColor * lightIntensity);

    color = diffuseColor * textureColor;

	color = color * materialColor;

    return textureColor * materialColor;
}