Texture2D shaderTexture;
SamplerState SampleType;


cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


float4 pixelShader(PixelInputType input) : SV_TARGET
{
	float4 color;
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
	float lightIntensity;
	//float4 textureColor;
	float3 lightDir;

	float4 color1;
    float4 color2;
    float4 alphaValue;
    float4 blendColor;

	//inverting the light direction:
	lightDir = -lightDirection;

	color = ambientColor;

	
		
		lightIntensity = saturate(dot(input.normal, lightDir));
		if(lightIntensity > 0.0f)
		{
			color += (diffuseColor * lightIntensity);
			color = saturate(color);
		}
	


	//if not in the view of the light, then just sample the regular pixel color from the texture at this texcoord location
	//blending of textures

    // Get the pixel color from the first texture.
	 color1 = shaderTexture.Sample(SampleType, input.tex);




	color = color1;
	return color;
}